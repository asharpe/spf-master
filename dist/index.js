import*as e from"dns";import i from"spf-parse";import s from"ip-regex";import{curry as r,path as a,defaultTo as o,compose as n,reject as t,either as m,isNil as l,isEmpty as c,pathOr as p,propEq as d,length as u,flatten as f,or as h,prop as v,equals as N,propOr as P}from"rambda";var O,T;!function(e){e.include="include",e.version="version",e.all="all",e.mx="mx",e.ip4="ip4",e.ip6="ip6",e.a="a"}(O||(O={})),function(e){e.UNKNWON="EUNKNWON",e.NOTFOUND="ENOTFOUND",e.IPS_NOT_MATCH="IPSMATCH",e.INC_NOT_MATCH="INCMATCH",e.DOM_NOT_MATCH="DOMMATCH"}(T||(T={}));var M=T;const y=r(((e,i)=>i.includes(e))),C=(r,M={},C=!0)=>{let w={found:!1,ips:[],includes:[],domains:[],match:!1};const x=r=>(e=>s.v4().test(e)||s.v6().test(e))(r)?Promise.reject(new Error(`Domain ${r} is a raw ip !`)):new Promise(((s,a)=>{e.resolveTxt(r,((e,r)=>{if(e)return a(e);s(r.reduce(((e,i)=>[...e,...i])).filter((e=>e.includes("v=spf1"))).map((e=>({record:e,detail:i(e||"")}))))}))})),D=async(e,i)=>{if((e=>{const i=p([],["detail","mechanisms"],e);0!==u(i)&&(i.filter(h(d("type",O.ip4),d("type",O.ip6))).map(v("value")).forEach((e=>{y(e,w.ips)||w.ips.push(e)})),i.filter(d("type",O.include)).map(v("value")).forEach((e=>{y(e,w.includes)||w.includes.push(e)})),i.filter(d("type",O.a)).map(v("value")).forEach((e=>{y(e,w.domains)||w.domains.push(e)})),w.match=[N(w.includes,P([],"includes",M)),N(w.ips,P([],"ips",M)),N(w.domains,P([],"domains",M))].every(N(!0))||w.match)})(e),w.match&&C)return Promise.resolve(e);if(i<0)return Promise.resolve(e);const s=p([],["detail","mechanisms"],e).filter(d("type",O.include));if(0===u(s))return Promise.resolve(e);const r=await Promise.all(s.map((e=>e.value)).map((e=>x(e))));return e.includes=await Promise.all(f(r).map((e=>new Promise((async s=>s(await D(e,i-1))))))),Promise.resolve(e)};return x(r).then((e=>Promise.all(e.map((e=>a(["detail","valid"],e)?D(e,Math.max(0,o(10,M.maxDepth))):Promise.resolve(e)))).then((e=>{const i=n(t(m(l,c)),o([]));return Promise.resolve({records:e||[],found:{ips:i(w.ips),includes:i(w.includes),domains:i(w.domains)},isMatch:w.match,reason:""})})).catch((e=>Promise.reject({records:[],found:{ips:[],includes:[],domains:[]},isMatch:!1,reason:T.NOTFOUND})))))};export{M as InspecterError,C as SpfInspector,O as SpfType,C as default};
